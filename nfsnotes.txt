nfs notes:
todo:
- do I want to use kickStartRT? 
-- all i have is final image....

- if I want to support textures for d3d9on12, it looks like i'll have to do uploads to those textures myself
-- the app was using managed_pool which seems to allow mapping
-- I could create all the textures as dynamic I think
-- dynamic works with unwrapping... but it seems the textures aren't swizzled correctly...
-- copy the device_imple update_texture_region (create temp texture ondemand)
- convert to list of barriers for bvhs built the current frame
- make warning disable list configurable through the .ini
- crash with execute command list goes away when using my own render target :-/
-- this occurs when i have the debug layer enabled... :-|
-- repro with dx9 sample and send to ms
-- this could be because of a mismatched dll d3d12.dll d3d12core.dll or sdklayers.dll
-- tried upgrading to the agility sdk but this crash still repros.
-- maybe that means I can repro in a small project
- mapped/updated geometry should do a blas refit, not a full rebuild if possible
- the proxies are not being passed to the d3d9on12 create function
-- something isn't hooked correctly for d3d12 32-bit
-- maybe I just need to make this mode more pass through?
-- could be related to different d3d12 versions?
--- the version (maybe d3d12.dll and d3d12core.dll) might not match what reshade builds against
- use amd d3d12 memory allocator
- if i don't mark buffers as dynamic, can I then unwrap them?
-- hard to do this in advance, I'd only know on map if the buffer needed to be dynamic...
- add smarter way to free blases that haven't been seen or built in a while
-- linkedlist, deque?
- decode all the texcoord stream elements
- only do 3+ bounces if you've hit a mirror surface
- alpha-test support is expensive...
-- is there a better way here?
- add instance color data debug mode
- pass my camera to the game
- blinking hazard lights are done by changing the texture every frame
-- make an emmissive material for this
- better material for head lights?
- put translucents (like particles) in a separate pass and do a separate reflection trace against them
-- this needs its own history buffer
- add json loading/storing for the light scene
- add obj loading for emissive light shapes
- add diffuse/specular split for future denoising
- add better rng.
-- strat sobol + bluenoise?
- hot functions:
-- bvh::update, instance data clear can take a looong time (1+ms)
- tracy may be running out of  memory :-/
- look at RtxMu for blas memory management
- full game is actually quite good, issues:
-- lots of flickering
-- need to keep drawing static things even if they have not been drawn by the view
--- I think I can determine the transform when adding the static object instead of doing this in the tlas pass
-- missing some draws
--- sky. this should be added in a separate tlas perhaps....
---- this is using the normal static vs shader
--- sign
--- mountain
---- sign/mountain are using some car headlight receiving shader (but I think I can ignore the car part)
----- I think I need to take this shader into account actually or it will never get "lit" at night time
-- something is wrong with texture id somehow, parts of car are picking up wrong textures
-- neon signs need to be emissive!
- there seems to be constant motion somehow, messing up my motion related rejection

//car vs layout
//   HarmonicCoeff c0      10
//   WorldViewProj c10      4
//   WorldView     c14      3
//   LocalEyePos   c17      1
//   DiffuseMin    c18      1
//   DiffuseRange  c19      1
//   SpecularMin   c20      1
//   SpecularRange c21      1
//   SpecularPower c22      1
//   EnvmapPower   c23      1

// red car paint, no decals
diff min 	{ 0.7343, 0.7217, 0.63, 1 },
diff range 	{ 0.2657, 0.2783, 0.32, 0 },
spec min 	{ 1.1025, 1.0458, 0.9135, 0 },
spec range 	{ -0.6825, -0.6636, -0.6874, 0 },
spec power 	{ 3.85, 0, 0, 0 }, = .58
env power 	{ 0.8, 0, 0, 0 }, 4.8 = .54

// blue car paint
diff min 	{ 0.662, 0.65538, 0.67193, 0.993 },
diff range 	{ 0.41, 0.41662, 0.251062, -0.828 },
spec min 	{ 1, 1.015, 1.038, 0 },
spec range 	{ -0.3652, -0.406, -0.4584, 0 },
spec power 	{ 5.72, 0, 0, 0 }, = .5
env power 	{ 0.262, 0, 0, 0 }, 21.8 = .29

// celica
diff min 	{ 1.08274, 1.0109, 0.071832, 1 },
diff range 	{ 0.823092, 0.104124, 0.056014, -0.993 },
spec min 	{ 1.64523, 0, 0, 0 },
spec range 	{ -0.68623, 0.959, 0.959, 0 },
spec power 	{ 1.3508, 0, 0, 0 }, = .77
env power 	{ 0.5, 0, 0, 0 }, 2.7 = .65

// ae86
diff min 	{ 0.878148, 0.872226, 0.753786, 1 },
diff range 	{ 0.132852, 0.127774, 0.362214, -0.955 },
spec min 	{ 1.20086, 1.20978, 1.20086, 0 },
spec range 	{ -0.113223, -0.122143, -0.320391, 0 },
spec power 	{ 2.3353, 0, 0, 0 },
env power 	{ 0.404, 0, 0, 0 }, 5.75 = .5

// tires
spec min	{ 0.248, 0.248, 0.2604, 0 },
spec range	{ 0.014, 0.014, 0.0016, 0 },
spec pow	{ 6.4174, 0, 0, 0 },
env pow		{ 0.072, 0, 0, 0 },

// glass
diff min	{ 0.037515, 0.13725, 0.343125, 0.5 },
diff range	{ 0.055285, -0.04445, -0.250325, 0.5 },
spec min	{ 0.5, 0.5, 0.55, 0 },
spec range	{ 0, 0, -0.05, 0 },
spec pow	{ 5.8993, 0, 0, 0 },
env pow		{ 1, 0, 0, 0 },

// window decal
diff min 	{ 1, 1, 1, 1 },
diff range	{ 0, 0, 0, 0 },
spec min	{ 0, 0, 0, 0 },
spec range	{ 0.195, 0.195, 0.195, 0 },
spec pow	{ 1.3915, 0, 0, 0 },
env pow		{ 2, 0, 0, 0 },

//headlight normal
reflector:
diff min 	{ 0, 0, 0, 1 },
diff range	{ 0, 0, 0, 0 },
spec min	{ 1, 1, 1, 0 },
spec range	{ 0, 0, 0, 0 },
spec pow	{ 4.4, 0, 0, 0 },
env pow		{ 2, 0, 0, 0 },

projectors:
diff min 	{ 1, 1, 1, 1 },
diff range	{ 0, 0, 0, 0 },
spec min	{ 1, 1, 1, 0 },
spec range	{ 0, 0, 0, 0 },
spec pow	{ 2.8193, 0, 0, 0 },
env pow		{ 2, 0, 0, 0 },

cover:
diff min 	{ 0.99, 0.99, 0.99, 0.4 },
diff range	{ 0.00999993, 0.00999993, 0.00999993, 0.4 },
spec min	{ 0.97162, 0.962, 0.98124, 0 },
spec range	{ -0.1212, -0.12, -0.1224, 0 },
spec pow	{ 5.4131, 0, 0, 0 },
env pow		{ 3.246, 0, 0, 0 },
blend = src * src.a + dst * 1

// glass pixel shader
//   EnvmapMin      c0       1
//   EnvmapRange    c1       1
//   envmap_sampler s0       1
//   samp           s1       1
//
// v0 == oD0
// v1 == oD1
// t0 == oT0
// t1 == oT1
ps_1_1
tex t0
tex t1
mad r0.xyz, v1.w, c1, c0
mul_x2 r0.xyz, t0, r0
add r0.xyz, r0, v1
mul_x2 r1, t1, v0
mul_x2 r0.xyz, r0, r1.w
add r0.xyz, r0, r1
+ mov r0.w, r1.w

r0 = v1.w * c1 + c0
r0 = sample(s0, t0) * r0
r0.xyz += v1.xyz //(lit spec) + envmap

r1 = sample(s1, t1) * v0 // (lit diffuse) * texture
r0.xyz = r0.xyz * r1.a //(lit spec) * tex.a
r0.xyz += r1.xyz // (diff + spec)
r0.w = r1.a

//hood
vs 5461187419696972836
ps 7314718503845779620
{ 0.662, 0.65538, 0.67193, 0.993 },
{ 0.41, 0.41662, 0.251062, -0.828 },
{ 1, 1.015, 1.038, 0 },
{ -0.3652, -0.406, -0.4584, 0 },
{ 5.72, 0, 0, 0 },
{ 0.262, 0, 0, 0 },

bind_pipeline_state(fog_enable, 0)
bind_pipeline_state(render_target_write_mask, 7)
bind_pipeline_state(alpha_test_enable, 0)
bind_pipeline_state(alpha_reference_value, 0)
bind_pipeline_state(blend_enable, 0)
bind_pipeline_state(src_color_blend_factor, srcalpha)
bind_pipeline_state(dst_color_blend_factor, 1-srcalpha)
bind_pipeline_state(depth_func, 3)

//windshield
vs 5461187419696972836
ps 7314718503845779620
{ 0.831, 0.969, 0.738, 0.3 },
{ -0.464, -0.607505, -0.379441, 0.7 },
{ 0.7359, 0.81618, 0.458934, 0 },
{ -0.6039, -0.66978, -0.311334, 0 },
{ 2.6312, 0, 0, 0 },
{ 1.4, 0, 0, 0 },

bind_pipeline_state(fog_enable, 0)
bind_pipeline_state(render_target_write_mask, 7)
bind_pipeline_state(alpha_test_enable, 0)
bind_pipeline_state(alpha_reference_value, 0)
bind_pipeline_state(blend_enable, 1)
bind_pipeline_state(src_color_blend_factor, srcalpha)
bind_pipeline_state(dst_color_blend_factor, 1-srcalpha)
bind_pipeline_state(depth_func, 3)

init_pipeline(input_layout, 17DE63A0 = {
	POSITION: r32g32b32_float
	NORMAL: r32g32b32_float
	TEXCOORD: r32g32b32_float
	BLENDWEIGHT: r32g32b32_float
	BLENDINDICES: r32g32b32_float
})
init_pipeline(input_layout, 17DE63A0 = {
	POSITION: r32g32b32_float
	NORMAL: r32g32b32_float
	COLOR: b8g8r8a8_unorm
	TEXCOORD: r32g32_float
})


//headlight
vs 5461187419696972836
ps 7314718503845779620
{ 0.99, 0.99, 0.99, 0.4 },
{ 0.00999993, 0.00999993, 0.00999993, 0.4 },
{ 0.97162, 0.962, 0.98124, 0 },
{ -0.1212, -0.12, -0.1224, 0 },
{ 5.4131, 0, 0, 0 },
{ 3.246, 0, 0, 0 },

bind_pipeline_state(fog_enable, 0)
bind_pipeline_state(render_target_write_mask, 7)
bind_pipeline_state(alpha_test_enable, 0)
bind_pipeline_state(alpha_reference_value, 0)
bind_pipeline_state(blend_enable, 1)
bind_pipeline_state(src_color_blend_factor, srcalpha)
bind_pipeline_state(dst_color_blend_factor, one)
bind_pipeline_state(depth_func, 3)

init_pipeline(input_layout, 17DE63A0 = {
	POSITION: r32g32b32_float
	NORMAL: r32g32b32_float
	TEXCOORD: r32g32b32_float
	BLENDWEIGHT: r32g32b32_float
	BLENDINDICES: r32g32b32_float
})
init_pipeline(input_layout, 17DE63A0 = {
	POSITION: r32g32b32_float
	NORMAL: r32g32b32_float
	COLOR: b8g8r8a8_unorm
	TEXCOORD: r32g32_float
})

// additive blending. can differentiate with glass 

windshiled banner:
{ 1, 1, 1, 1 },
{ 0, 0, 0, 0 },
{ 0, 0, 0, 0 },
{ 0.195, 0.195, 0.195, 0 },
{ 1.3915, 0, 0, 0 },
{ 2, 0, 0, 0 },
